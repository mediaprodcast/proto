syntax = "proto3";

package config.v1;

// ----------------------------------------------------input config---------------------------------------
// Represents the type of an input stream.
enum InputType {
  // A track from a file. Usable only with VOD.
  FILE = 0;
  // A track from a file, looped forever by FFmpeg.
  // Usable only with live.
  // Does not support media_type of 'text'.
  LOOPED_FILE = 1;
  // A webcam device.
  // Usable only with live.
  // The device path should be given in the name field.
  // For example, on Linux, this might be /dev/video0.
  // Only supports media_type of 'video'.
  WEBCAM = 2;
  // A microphone device.
  // Usable only with live.
  // The device path should given in the name field.
  // For example, on Linux, this might be "default".
  // Only supports media_type of 'audio'.
  MICROPHONE = 3;
  // An external command that generates a stream of audio or video.
  // The command should be given in the name field, using shell quoting rules.
  // The command should send its generated output to the path in the environment variable $SHAKA_STREAMER_EXTERNAL_COMMAND_OUTPUT, which Shaka Streamer set to the path to the output pipe.
  // May require the user of extra_input_args if FFmpeg can't guess the format or framerate.
  // Does not support media_type of 'text'.
  EXTERNAL_COMMAND = 4;
}

// Represents the media type of an input stream.
enum MediaType {
  AUDIO = 0;
  VIDEO = 1;
  TEXT = 2;
}

// An object representing a single input stream to Shaka Streamer.
message Input {
  // The type of the input.
  InputType input_type = 1;

  // Name of the input.
  // With input_type set to 'file', this is a path to a file name.
  // With input_type set to 'looped_file', this is a path to a file name to be looped indefinitely in FFmpeg.
  // With input_type set to 'webcam', this is which webcam.
  // On Linux, this is a path to the device node for the webcam, such as '/dev/video0'.
  // On macOS, this is a device name, such as 'default'.
  // With input_type set to 'external_command', this is an external command that generates a stream of audio or video. The command will be parsed using shell quoting rules. The command should send its generated output to the path in the environment variable $SHAKA_STREAMER_EXTERNAL_COMMAND_OUTPUT, which Shaka Streamer set to the path to the output pipe.
  string name = 2;

  // Extra input arguments needed by FFmpeg to understand the input.
  // This allows you to take inputs that cannot be understand or detected automatically by FFmpeg.
  // This string will be parsed using shell quoting rules.
  optional string extra_input_args = 3;

  // The media type of the input stream.
  MediaType media_type = 4;

  // The frame rate of the input stream, in frames per second.
  // Only valid for media_type of 'video'.
  // Can be auto-detected for some input types, but may be required for others.
  // For example, required for input_type of 'external_command'.
  optional double frame_rate = 5;

  // The name of the input resolution (1080p, etc).
  // Only valid for media_type of 'video'.
  // Can be auto-detected for some input types, but may be required for others.
  // For example, required for input_type of 'external_command'.
  optional string resolution = 6;

  // The name of the input channel layout (stereo, surround, etc).
  optional string channel_layout = 7;

  // The track number of the input.
  // The track number is specific to the media_type. For example, if there is one video track and two audio tracks, media_type of 'audio' and track_num of '0' indicates the first audio track, not the first track overall in that file.
  // If unspecified, track_num will default to 0, meaning the first track matching the media_type field will be used.
  int32 track_num = 8;

  // True if the input video is interlaced.
  // Only valid for media_type of 'video'.
  // If true, the video will be deinterlaced during transcoding.
  // Can be auto-detected for some input types, but may be default to False for others.
  // For example, an input_type of 'external_command', it will default to false.
  optional bool is_interlaced = 9;

  // The language of an audio or text stream.
  // With input_type set to 'file' or 'looped_file', this will be auto-detected.
  // Otherwise, it will default to 'und' (undetermined).
  optional string language = 10;

  // The start time of the slice of the input to use.
  // Only valid for VOD and with input_type set to 'file'.
  // Not supported with media_type of 'text'.
  optional string start_time = 11;

  // The end time of the slice of the input to use.
  // Only valid for VOD and with input_type set to 'file'.
  // Not supported with media_type of 'text'.
  optional string end_time = 12;

  // Optional value for a custom DRM label, which defines the encryption key applied to the stream. If not provided, the DRM label is derived from stream type (video, audio), resolutions, etc. Note that it is case sensitive. Applies to 'raw' encryption_mode only.
  optional string drm_label = 13;

  // If set, no encryption of the stream will be made
  optional int32 skip_encryption = 14;

  // A list of FFmpeg filter strings to add to the transcoding of this input.
  // Each filter is a single string. For example, 'pad=1280:720:20:20'.
  // Not supported with media_type of 'text'.
  repeated string filters = 15;

  // number of frames
  optional int32 frames = 16;

  // input duration
  optional double duration = 17;

  // Indicates that the subtitle is forced.
  // Only supported with media_type of 'text'.
  optional bool forced_subtitle = 18;
}

/** An object representing a single period in a multiperiod inputs list. */
message SinglePeriod {
  repeated Input inputs = 1;
}

// An object representing the entire input config
message InputConfig {
  // A list of SinglePeriod objects
  repeated SinglePeriod multiperiod_inputs_list = 1;

  // A list of Input objects
  repeated Input inputs = 2;
}
