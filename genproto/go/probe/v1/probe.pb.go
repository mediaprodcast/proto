// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: probe/v1/probe.proto

package probev1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamType int32

const (
	StreamType_ANY        StreamType = 0
	StreamType_VIDEO      StreamType = 1
	StreamType_AUDIO      StreamType = 2
	StreamType_SUBTITLE   StreamType = 3
	StreamType_DATA       StreamType = 4
	StreamType_ATTACHMENT StreamType = 5
)

// Enum value maps for StreamType.
var (
	StreamType_name = map[int32]string{
		0: "ANY",
		1: "VIDEO",
		2: "AUDIO",
		3: "SUBTITLE",
		4: "DATA",
		5: "ATTACHMENT",
	}
	StreamType_value = map[string]int32{
		"ANY":        0,
		"VIDEO":      1,
		"AUDIO":      2,
		"SUBTITLE":   3,
		"DATA":       4,
		"ATTACHMENT": 5,
	}
)

func (x StreamType) Enum() *StreamType {
	p := new(StreamType)
	*p = x
	return p
}

func (x StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_probe_v1_probe_proto_enumTypes[0].Descriptor()
}

func (StreamType) Type() protoreflect.EnumType {
	return &file_probe_v1_probe_proto_enumTypes[0]
}

func (x StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamType.Descriptor instead.
func (StreamType) EnumDescriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{0}
}

type StreamDisposition struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Default         int32                  `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Dub             int32                  `protobuf:"varint,2,opt,name=dub,proto3" json:"dub,omitempty"`
	Original        int32                  `protobuf:"varint,3,opt,name=original,proto3" json:"original,omitempty"`
	Comment         int32                  `protobuf:"varint,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Lyrics          int32                  `protobuf:"varint,5,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	Karaoke         int32                  `protobuf:"varint,6,opt,name=karaoke,proto3" json:"karaoke,omitempty"`
	Forced          int32                  `protobuf:"varint,7,opt,name=forced,proto3" json:"forced,omitempty"`
	HearingImpaired int32                  `protobuf:"varint,8,opt,name=hearing_impaired,json=hearingImpaired,proto3" json:"hearing_impaired,omitempty"`
	VisualImpaired  int32                  `protobuf:"varint,9,opt,name=visual_impaired,json=visualImpaired,proto3" json:"visual_impaired,omitempty"`
	CleanEffects    int32                  `protobuf:"varint,10,opt,name=clean_effects,json=cleanEffects,proto3" json:"clean_effects,omitempty"`
	AttachedPic     int32                  `protobuf:"varint,11,opt,name=attached_pic,json=attachedPic,proto3" json:"attached_pic,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamDisposition) Reset() {
	*x = StreamDisposition{}
	mi := &file_probe_v1_probe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDisposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDisposition) ProtoMessage() {}

func (x *StreamDisposition) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDisposition.ProtoReflect.Descriptor instead.
func (*StreamDisposition) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{0}
}

func (x *StreamDisposition) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *StreamDisposition) GetDub() int32 {
	if x != nil {
		return x.Dub
	}
	return 0
}

func (x *StreamDisposition) GetOriginal() int32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *StreamDisposition) GetComment() int32 {
	if x != nil {
		return x.Comment
	}
	return 0
}

func (x *StreamDisposition) GetLyrics() int32 {
	if x != nil {
		return x.Lyrics
	}
	return 0
}

func (x *StreamDisposition) GetKaraoke() int32 {
	if x != nil {
		return x.Karaoke
	}
	return 0
}

func (x *StreamDisposition) GetForced() int32 {
	if x != nil {
		return x.Forced
	}
	return 0
}

func (x *StreamDisposition) GetHearingImpaired() int32 {
	if x != nil {
		return x.HearingImpaired
	}
	return 0
}

func (x *StreamDisposition) GetVisualImpaired() int32 {
	if x != nil {
		return x.VisualImpaired
	}
	return 0
}

func (x *StreamDisposition) GetCleanEffects() int32 {
	if x != nil {
		return x.CleanEffects
	}
	return 0
}

func (x *StreamDisposition) GetAttachedPic() int32 {
	if x != nil {
		return x.AttachedPic
	}
	return 0
}

type Stream struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Index              int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Id                 string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CodecName          string                 `protobuf:"bytes,3,opt,name=codec_name,json=codecName,proto3" json:"codec_name,omitempty"`
	CodecLongName      string                 `protobuf:"bytes,4,opt,name=codec_long_name,json=codecLongName,proto3" json:"codec_long_name,omitempty"`
	CodecType          StreamType             `protobuf:"varint,5,opt,name=codec_type,json=codecType,proto3,enum=probe.v1.StreamType" json:"codec_type,omitempty"`
	CodecTimeBase      string                 `protobuf:"bytes,6,opt,name=codec_time_base,json=codecTimeBase,proto3" json:"codec_time_base,omitempty"`
	CodecTagString     string                 `protobuf:"bytes,7,opt,name=codec_tag_string,json=codecTagString,proto3" json:"codec_tag_string,omitempty"`
	CodecTag           string                 `protobuf:"bytes,8,opt,name=codec_tag,json=codecTag,proto3" json:"codec_tag,omitempty"`
	RFrameRate         string                 `protobuf:"bytes,9,opt,name=r_frame_rate,json=rFrameRate,proto3" json:"r_frame_rate,omitempty"`
	AvgFrameRate       string                 `protobuf:"bytes,10,opt,name=avg_frame_rate,json=avgFrameRate,proto3" json:"avg_frame_rate,omitempty"`
	TimeBase           string                 `protobuf:"bytes,11,opt,name=time_base,json=timeBase,proto3" json:"time_base,omitempty"`
	StartPts           int32                  `protobuf:"varint,12,opt,name=start_pts,json=startPts,proto3" json:"start_pts,omitempty"`
	StartTime          string                 `protobuf:"bytes,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	DurationTs         uint64                 `protobuf:"varint,14,opt,name=duration_ts,json=durationTs,proto3" json:"duration_ts,omitempty"`
	Duration           string                 `protobuf:"bytes,15,opt,name=duration,proto3" json:"duration,omitempty"`
	BitRate            string                 `protobuf:"bytes,16,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	BitsPerRawSample   string                 `protobuf:"bytes,17,opt,name=bits_per_raw_sample,json=bitsPerRawSample,proto3" json:"bits_per_raw_sample,omitempty"`
	NbFrames           string                 `protobuf:"bytes,18,opt,name=nb_frames,json=nbFrames,proto3" json:"nb_frames,omitempty"`
	Disposition        *StreamDisposition     `protobuf:"bytes,19,opt,name=disposition,proto3" json:"disposition,omitempty"`
	Tags               map[string]string      `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FieldOrder         string                 `protobuf:"bytes,21,opt,name=field_order,json=fieldOrder,proto3" json:"field_order,omitempty"`
	Profile            string                 `protobuf:"bytes,22,opt,name=profile,proto3" json:"profile,omitempty"`
	Width              int32                  `protobuf:"varint,23,opt,name=width,proto3" json:"width,omitempty"`
	Height             int32                  `protobuf:"varint,24,opt,name=height,proto3" json:"height,omitempty"`
	HasBFrames         int32                  `protobuf:"varint,25,opt,name=has_b_frames,json=hasBFrames,proto3" json:"has_b_frames,omitempty"`
	SampleAspectRatio  string                 `protobuf:"bytes,26,opt,name=sample_aspect_ratio,json=sampleAspectRatio,proto3" json:"sample_aspect_ratio,omitempty"`
	DisplayAspectRatio string                 `protobuf:"bytes,27,opt,name=display_aspect_ratio,json=displayAspectRatio,proto3" json:"display_aspect_ratio,omitempty"`
	PixFmt             string                 `protobuf:"bytes,28,opt,name=pix_fmt,json=pixFmt,proto3" json:"pix_fmt,omitempty"`
	Level              int32                  `protobuf:"varint,29,opt,name=level,proto3" json:"level,omitempty"`
	ColorRange         string                 `protobuf:"bytes,30,opt,name=color_range,json=colorRange,proto3" json:"color_range,omitempty"`
	ColorSpace         string                 `protobuf:"bytes,31,opt,name=color_space,json=colorSpace,proto3" json:"color_space,omitempty"`
	ColorTransfer      string                 `protobuf:"bytes,32,opt,name=color_transfer,json=colorTransfer,proto3" json:"color_transfer,omitempty"`
	ColorPrimaries     string                 `protobuf:"bytes,33,opt,name=color_primaries,json=colorPrimaries,proto3" json:"color_primaries,omitempty"`
	SampleFmt          string                 `protobuf:"bytes,34,opt,name=sample_fmt,json=sampleFmt,proto3" json:"sample_fmt,omitempty"`
	SampleRate         string                 `protobuf:"bytes,35,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Channels           int32                  `protobuf:"varint,36,opt,name=channels,proto3" json:"channels,omitempty"`
	ChannelLayout      string                 `protobuf:"bytes,37,opt,name=channel_layout,json=channelLayout,proto3" json:"channel_layout,omitempty"`
	BitsPerSample      int32                  `protobuf:"varint,38,opt,name=bits_per_sample,json=bitsPerSample,proto3" json:"bits_per_sample,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_probe_v1_probe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{1}
}

func (x *Stream) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Stream) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stream) GetCodecName() string {
	if x != nil {
		return x.CodecName
	}
	return ""
}

func (x *Stream) GetCodecLongName() string {
	if x != nil {
		return x.CodecLongName
	}
	return ""
}

func (x *Stream) GetCodecType() StreamType {
	if x != nil {
		return x.CodecType
	}
	return StreamType_ANY
}

func (x *Stream) GetCodecTimeBase() string {
	if x != nil {
		return x.CodecTimeBase
	}
	return ""
}

func (x *Stream) GetCodecTagString() string {
	if x != nil {
		return x.CodecTagString
	}
	return ""
}

func (x *Stream) GetCodecTag() string {
	if x != nil {
		return x.CodecTag
	}
	return ""
}

func (x *Stream) GetRFrameRate() string {
	if x != nil {
		return x.RFrameRate
	}
	return ""
}

func (x *Stream) GetAvgFrameRate() string {
	if x != nil {
		return x.AvgFrameRate
	}
	return ""
}

func (x *Stream) GetTimeBase() string {
	if x != nil {
		return x.TimeBase
	}
	return ""
}

func (x *Stream) GetStartPts() int32 {
	if x != nil {
		return x.StartPts
	}
	return 0
}

func (x *Stream) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Stream) GetDurationTs() uint64 {
	if x != nil {
		return x.DurationTs
	}
	return 0
}

func (x *Stream) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Stream) GetBitRate() string {
	if x != nil {
		return x.BitRate
	}
	return ""
}

func (x *Stream) GetBitsPerRawSample() string {
	if x != nil {
		return x.BitsPerRawSample
	}
	return ""
}

func (x *Stream) GetNbFrames() string {
	if x != nil {
		return x.NbFrames
	}
	return ""
}

func (x *Stream) GetDisposition() *StreamDisposition {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *Stream) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Stream) GetFieldOrder() string {
	if x != nil {
		return x.FieldOrder
	}
	return ""
}

func (x *Stream) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *Stream) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Stream) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Stream) GetHasBFrames() int32 {
	if x != nil {
		return x.HasBFrames
	}
	return 0
}

func (x *Stream) GetSampleAspectRatio() string {
	if x != nil {
		return x.SampleAspectRatio
	}
	return ""
}

func (x *Stream) GetDisplayAspectRatio() string {
	if x != nil {
		return x.DisplayAspectRatio
	}
	return ""
}

func (x *Stream) GetPixFmt() string {
	if x != nil {
		return x.PixFmt
	}
	return ""
}

func (x *Stream) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Stream) GetColorRange() string {
	if x != nil {
		return x.ColorRange
	}
	return ""
}

func (x *Stream) GetColorSpace() string {
	if x != nil {
		return x.ColorSpace
	}
	return ""
}

func (x *Stream) GetColorTransfer() string {
	if x != nil {
		return x.ColorTransfer
	}
	return ""
}

func (x *Stream) GetColorPrimaries() string {
	if x != nil {
		return x.ColorPrimaries
	}
	return ""
}

func (x *Stream) GetSampleFmt() string {
	if x != nil {
		return x.SampleFmt
	}
	return ""
}

func (x *Stream) GetSampleRate() string {
	if x != nil {
		return x.SampleRate
	}
	return ""
}

func (x *Stream) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *Stream) GetChannelLayout() string {
	if x != nil {
		return x.ChannelLayout
	}
	return ""
}

func (x *Stream) GetBitsPerSample() int32 {
	if x != nil {
		return x.BitsPerSample
	}
	return 0
}

type Format struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Filename         string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	NbStreams        int32                  `protobuf:"varint,2,opt,name=nb_streams,json=nbStreams,proto3" json:"nb_streams,omitempty"`
	NbPrograms       int32                  `protobuf:"varint,3,opt,name=nb_programs,json=nbPrograms,proto3" json:"nb_programs,omitempty"`
	FormatName       string                 `protobuf:"bytes,4,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	FormatLongName   string                 `protobuf:"bytes,5,opt,name=format_long_name,json=formatLongName,proto3" json:"format_long_name,omitempty"`
	StartTimeSeconds float64                `protobuf:"fixed64,6,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	DurationSeconds  float64                `protobuf:"fixed64,7,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	Size             string                 `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	BitRate          string                 `protobuf:"bytes,9,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	ProbeScore       int32                  `protobuf:"varint,10,opt,name=probe_score,json=probeScore,proto3" json:"probe_score,omitempty"`
	Tags             map[string]string      `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Format) Reset() {
	*x = Format{}
	mi := &file_probe_v1_probe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Format) ProtoMessage() {}

func (x *Format) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Format.ProtoReflect.Descriptor instead.
func (*Format) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{2}
}

func (x *Format) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Format) GetNbStreams() int32 {
	if x != nil {
		return x.NbStreams
	}
	return 0
}

func (x *Format) GetNbPrograms() int32 {
	if x != nil {
		return x.NbPrograms
	}
	return 0
}

func (x *Format) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *Format) GetFormatLongName() string {
	if x != nil {
		return x.FormatLongName
	}
	return ""
}

func (x *Format) GetStartTimeSeconds() float64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *Format) GetDurationSeconds() float64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *Format) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Format) GetBitRate() string {
	if x != nil {
		return x.BitRate
	}
	return ""
}

func (x *Format) GetProbeScore() int32 {
	if x != nil {
		return x.ProbeScore
	}
	return 0
}

func (x *Format) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Chapter struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeBase         string                 `protobuf:"bytes,2,opt,name=time_base,json=timeBase,proto3" json:"time_base,omitempty"`
	StartTimeSeconds float64                `protobuf:"fixed64,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   float64                `protobuf:"fixed64,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	Tags             map[string]string      `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	mi := &file_probe_v1_probe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{3}
}

func (x *Chapter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chapter) GetTimeBase() string {
	if x != nil {
		return x.TimeBase
	}
	return ""
}

func (x *Chapter) GetStartTimeSeconds() float64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *Chapter) GetEndTimeSeconds() float64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

func (x *Chapter) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ProbeData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       []*Stream              `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	Format        *Format                `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Chapters      []*Chapter             `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProbeData) Reset() {
	*x = ProbeData{}
	mi := &file_probe_v1_probe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeData) ProtoMessage() {}

func (x *ProbeData) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeData.ProtoReflect.Descriptor instead.
func (*ProbeData) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{4}
}

func (x *ProbeData) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *ProbeData) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ProbeData) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

type GetProbeDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProbeDataRequest) Reset() {
	*x = GetProbeDataRequest{}
	mi := &file_probe_v1_probe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProbeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProbeDataRequest) ProtoMessage() {}

func (x *GetProbeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProbeDataRequest.ProtoReflect.Descriptor instead.
func (*GetProbeDataRequest) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{5}
}

func (x *GetProbeDataRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type GetStreamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       []*Stream              `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamsResponse) Reset() {
	*x = GetStreamsResponse{}
	mi := &file_probe_v1_probe_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamsResponse) ProtoMessage() {}

func (x *GetStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamsResponse.ProtoReflect.Descriptor instead.
func (*GetStreamsResponse) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{6}
}

func (x *GetStreamsResponse) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type GetFormatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        *Format                `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFormatResponse) Reset() {
	*x = GetFormatResponse{}
	mi := &file_probe_v1_probe_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFormatResponse) ProtoMessage() {}

func (x *GetFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFormatResponse.ProtoReflect.Descriptor instead.
func (*GetFormatResponse) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{7}
}

func (x *GetFormatResponse) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

type GetChaptersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chapters      []*Chapter             `protobuf:"bytes,1,rep,name=chapters,proto3" json:"chapters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChaptersResponse) Reset() {
	*x = GetChaptersResponse{}
	mi := &file_probe_v1_probe_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChaptersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChaptersResponse) ProtoMessage() {}

func (x *GetChaptersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChaptersResponse.ProtoReflect.Descriptor instead.
func (*GetChaptersResponse) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{8}
}

func (x *GetChaptersResponse) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

type GetProbeDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *ProbeData             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProbeDataResponse) Reset() {
	*x = GetProbeDataResponse{}
	mi := &file_probe_v1_probe_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProbeDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProbeDataResponse) ProtoMessage() {}

func (x *GetProbeDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProbeDataResponse.ProtoReflect.Descriptor instead.
func (*GetProbeDataResponse) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{9}
}

func (x *GetProbeDataResponse) GetData() *ProbeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetProbeDataBulkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         []string               `protobuf:"bytes,1,rep,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProbeDataBulkRequest) Reset() {
	*x = GetProbeDataBulkRequest{}
	mi := &file_probe_v1_probe_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProbeDataBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProbeDataBulkRequest) ProtoMessage() {}

func (x *GetProbeDataBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProbeDataBulkRequest.ProtoReflect.Descriptor instead.
func (*GetProbeDataBulkRequest) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{10}
}

func (x *GetProbeDataBulkRequest) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetProbeDataBulkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ProbeData           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProbeDataBulkResponse) Reset() {
	*x = GetProbeDataBulkResponse{}
	mi := &file_probe_v1_probe_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProbeDataBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProbeDataBulkResponse) ProtoMessage() {}

func (x *GetProbeDataBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProbeDataBulkResponse.ProtoReflect.Descriptor instead.
func (*GetProbeDataBulkResponse) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{11}
}

func (x *GetProbeDataBulkResponse) GetData() []*ProbeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Input         string                 `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	mi := &file_probe_v1_probe_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{12}
}

func (x *GetStreamRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetStreamRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        *Stream                `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	mi := &file_probe_v1_probe_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{13}
}

func (x *GetStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type GetStreamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamsRequest) Reset() {
	*x = GetStreamsRequest{}
	mi := &file_probe_v1_probe_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamsRequest) ProtoMessage() {}

func (x *GetStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamsRequest.ProtoReflect.Descriptor instead.
func (*GetStreamsRequest) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{14}
}

func (x *GetStreamsRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type GetChaptersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChaptersRequest) Reset() {
	*x = GetChaptersRequest{}
	mi := &file_probe_v1_probe_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChaptersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChaptersRequest) ProtoMessage() {}

func (x *GetChaptersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChaptersRequest.ProtoReflect.Descriptor instead.
func (*GetChaptersRequest) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{15}
}

func (x *GetChaptersRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type GetFormatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFormatRequest) Reset() {
	*x = GetFormatRequest{}
	mi := &file_probe_v1_probe_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFormatRequest) ProtoMessage() {}

func (x *GetFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_probe_v1_probe_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFormatRequest.ProtoReflect.Descriptor instead.
func (*GetFormatRequest) Descriptor() ([]byte, []int) {
	return file_probe_v1_probe_proto_rawDescGZIP(), []int{16}
}

func (x *GetFormatRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

var File_probe_v1_probe_proto protoreflect.FileDescriptor

var file_probe_v1_probe_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb,
	0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x75, 0x62,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x61, 0x72, 0x61, 0x6f, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6b, 0x61, 0x72, 0x61, 0x6f, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x70, 0x61,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x61,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x69, 0x63, 0x22, 0xdf, 0x0a, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x4c, 0x6f, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76,
	0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x77, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x62, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x42, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x78,
	0x5f, 0x66, 0x6d, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x78, 0x46,
	0x6d, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6d, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6d, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1,
	0x03, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x62, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x62, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x62, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x40, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22,
	0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x44,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x3f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x43, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x29, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2a, 0x53, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x32, 0xc0, 0x05, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x62, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x7f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x62, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x13, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x62, 0x75,
	0x6c, 0x6b, 0x12, 0x6e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x62, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22,
	0x11, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x62, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x7d, 0x12, 0x73, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x62, 0x08, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x12, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x10, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x42, 0x98, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_probe_v1_probe_proto_rawDescOnce sync.Once
	file_probe_v1_probe_proto_rawDescData []byte
)

func file_probe_v1_probe_proto_rawDescGZIP() []byte {
	file_probe_v1_probe_proto_rawDescOnce.Do(func() {
		file_probe_v1_probe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_probe_v1_probe_proto_rawDesc), len(file_probe_v1_probe_proto_rawDesc)))
	})
	return file_probe_v1_probe_proto_rawDescData
}

var file_probe_v1_probe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_probe_v1_probe_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_probe_v1_probe_proto_goTypes = []any{
	(StreamType)(0),                  // 0: probe.v1.StreamType
	(*StreamDisposition)(nil),        // 1: probe.v1.StreamDisposition
	(*Stream)(nil),                   // 2: probe.v1.Stream
	(*Format)(nil),                   // 3: probe.v1.Format
	(*Chapter)(nil),                  // 4: probe.v1.Chapter
	(*ProbeData)(nil),                // 5: probe.v1.ProbeData
	(*GetProbeDataRequest)(nil),      // 6: probe.v1.GetProbeDataRequest
	(*GetStreamsResponse)(nil),       // 7: probe.v1.GetStreamsResponse
	(*GetFormatResponse)(nil),        // 8: probe.v1.GetFormatResponse
	(*GetChaptersResponse)(nil),      // 9: probe.v1.GetChaptersResponse
	(*GetProbeDataResponse)(nil),     // 10: probe.v1.GetProbeDataResponse
	(*GetProbeDataBulkRequest)(nil),  // 11: probe.v1.GetProbeDataBulkRequest
	(*GetProbeDataBulkResponse)(nil), // 12: probe.v1.GetProbeDataBulkResponse
	(*GetStreamRequest)(nil),         // 13: probe.v1.GetStreamRequest
	(*GetStreamResponse)(nil),        // 14: probe.v1.GetStreamResponse
	(*GetStreamsRequest)(nil),        // 15: probe.v1.GetStreamsRequest
	(*GetChaptersRequest)(nil),       // 16: probe.v1.GetChaptersRequest
	(*GetFormatRequest)(nil),         // 17: probe.v1.GetFormatRequest
	nil,                              // 18: probe.v1.Stream.TagsEntry
	nil,                              // 19: probe.v1.Format.TagsEntry
	nil,                              // 20: probe.v1.Chapter.TagsEntry
}
var file_probe_v1_probe_proto_depIdxs = []int32{
	0,  // 0: probe.v1.Stream.codec_type:type_name -> probe.v1.StreamType
	1,  // 1: probe.v1.Stream.disposition:type_name -> probe.v1.StreamDisposition
	18, // 2: probe.v1.Stream.tags:type_name -> probe.v1.Stream.TagsEntry
	19, // 3: probe.v1.Format.tags:type_name -> probe.v1.Format.TagsEntry
	20, // 4: probe.v1.Chapter.tags:type_name -> probe.v1.Chapter.TagsEntry
	2,  // 5: probe.v1.ProbeData.streams:type_name -> probe.v1.Stream
	3,  // 6: probe.v1.ProbeData.format:type_name -> probe.v1.Format
	4,  // 7: probe.v1.ProbeData.chapters:type_name -> probe.v1.Chapter
	2,  // 8: probe.v1.GetStreamsResponse.streams:type_name -> probe.v1.Stream
	3,  // 9: probe.v1.GetFormatResponse.format:type_name -> probe.v1.Format
	4,  // 10: probe.v1.GetChaptersResponse.chapters:type_name -> probe.v1.Chapter
	5,  // 11: probe.v1.GetProbeDataResponse.data:type_name -> probe.v1.ProbeData
	5,  // 12: probe.v1.GetProbeDataBulkResponse.data:type_name -> probe.v1.ProbeData
	2,  // 13: probe.v1.GetStreamResponse.stream:type_name -> probe.v1.Stream
	6,  // 14: probe.v1.ProbeService.GetProbeData:input_type -> probe.v1.GetProbeDataRequest
	11, // 15: probe.v1.ProbeService.GetProbeDataBulk:input_type -> probe.v1.GetProbeDataBulkRequest
	15, // 16: probe.v1.ProbeService.GetStreams:input_type -> probe.v1.GetStreamsRequest
	13, // 17: probe.v1.ProbeService.GetStream:input_type -> probe.v1.GetStreamRequest
	16, // 18: probe.v1.ProbeService.GetChapters:input_type -> probe.v1.GetChaptersRequest
	17, // 19: probe.v1.ProbeService.GetFormat:input_type -> probe.v1.GetFormatRequest
	10, // 20: probe.v1.ProbeService.GetProbeData:output_type -> probe.v1.GetProbeDataResponse
	12, // 21: probe.v1.ProbeService.GetProbeDataBulk:output_type -> probe.v1.GetProbeDataBulkResponse
	7,  // 22: probe.v1.ProbeService.GetStreams:output_type -> probe.v1.GetStreamsResponse
	14, // 23: probe.v1.ProbeService.GetStream:output_type -> probe.v1.GetStreamResponse
	9,  // 24: probe.v1.ProbeService.GetChapters:output_type -> probe.v1.GetChaptersResponse
	8,  // 25: probe.v1.ProbeService.GetFormat:output_type -> probe.v1.GetFormatResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_probe_v1_probe_proto_init() }
func file_probe_v1_probe_proto_init() {
	if File_probe_v1_probe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_probe_v1_probe_proto_rawDesc), len(file_probe_v1_probe_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_probe_v1_probe_proto_goTypes,
		DependencyIndexes: file_probe_v1_probe_proto_depIdxs,
		EnumInfos:         file_probe_v1_probe_proto_enumTypes,
		MessageInfos:      file_probe_v1_probe_proto_msgTypes,
	}.Build()
	File_probe_v1_probe_proto = out.File
	file_probe_v1_probe_proto_goTypes = nil
	file_probe_v1_probe_proto_depIdxs = nil
}
