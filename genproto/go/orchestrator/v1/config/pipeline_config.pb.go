// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: orchestrator/v1/config/pipeline_config.proto

package configv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the streaming mode.
type StreamingMode int32

const (
	StreamingMode_LIVE StreamingMode = 0 // Live stream.
	StreamingMode_VOD  StreamingMode = 1 // Video-on-demand stream.
)

// Enum value maps for StreamingMode.
var (
	StreamingMode_name = map[int32]string{
		0: "LIVE",
		1: "VOD",
	}
	StreamingMode_value = map[string]int32{
		"LIVE": 0,
		"VOD":  1,
	}
)

func (x StreamingMode) Enum() *StreamingMode {
	p := new(StreamingMode)
	*p = x
	return p
}

func (x StreamingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_orchestrator_v1_config_pipeline_config_proto_enumTypes[0].Descriptor()
}

func (StreamingMode) Type() protoreflect.EnumType {
	return &file_orchestrator_v1_config_pipeline_config_proto_enumTypes[0]
}

func (x StreamingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingMode.Descriptor instead.
func (StreamingMode) EnumDescriptor() ([]byte, []int) {
	return file_orchestrator_v1_config_pipeline_config_proto_rawDescGZIP(), []int{0}
}

// Represents the manifest format.
type ManifestFormat int32

const (
	ManifestFormat_DASH ManifestFormat = 0 // DASH (Dynamic Adaptive Streaming over HTTP)
	ManifestFormat_HLS  ManifestFormat = 1 // HLS (HTTP Live Streaming)
)

// Enum value maps for ManifestFormat.
var (
	ManifestFormat_name = map[int32]string{
		0: "DASH",
		1: "HLS",
	}
	ManifestFormat_value = map[string]int32{
		"DASH": 0,
		"HLS":  1,
	}
)

func (x ManifestFormat) Enum() *ManifestFormat {
	p := new(ManifestFormat)
	*p = x
	return p
}

func (x ManifestFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManifestFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_orchestrator_v1_config_pipeline_config_proto_enumTypes[1].Descriptor()
}

func (ManifestFormat) Type() protoreflect.EnumType {
	return &file_orchestrator_v1_config_pipeline_config_proto_enumTypes[1]
}

func (x ManifestFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManifestFormat.Descriptor instead.
func (ManifestFormat) EnumDescriptor() ([]byte, []int) {
	return file_orchestrator_v1_config_pipeline_config_proto_rawDescGZIP(), []int{1}
}

// Represents a UTCTiming element for DASH MPD.
type UtcTimingPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemeIdUri   string                 `protobuf:"bytes,1,opt,name=scheme_id_uri,json=schemeIdUri,proto3" json:"scheme_id_uri,omitempty"` // SchemeIdUri attribute.
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                                  // Value attribute.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UtcTimingPair) Reset() {
	*x = UtcTimingPair{}
	mi := &file_orchestrator_v1_config_pipeline_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtcTimingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtcTimingPair) ProtoMessage() {}

func (x *UtcTimingPair) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_v1_config_pipeline_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtcTimingPair.ProtoReflect.Descriptor instead.
func (*UtcTimingPair) Descriptor() ([]byte, []int) {
	return file_orchestrator_v1_config_pipeline_config_proto_rawDescGZIP(), []int{0}
}

func (x *UtcTimingPair) GetSchemeIdUri() string {
	if x != nil {
		return x.SchemeIdUri
	}
	return ""
}

func (x *UtcTimingPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Represents the entire pipeline configuration.
type PipelineConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	StreamingMode          StreamingMode          `protobuf:"varint,1,opt,name=streaming_mode,json=streamingMode,proto3,enum=config.v1.StreamingMode" json:"streaming_mode,omitempty"`            // Streaming mode.
	Quiet                  bool                   `protobuf:"varint,2,opt,name=quiet,proto3" json:"quiet,omitempty"`                                                                              // Whether to suppress output.
	DebugLogs              bool                   `protobuf:"varint,3,opt,name=debug_logs,json=debugLogs,proto3" json:"debug_logs,omitempty"`                                                     // Whether to enable debug logs.
	HwaccelApi             string                 `protobuf:"bytes,4,opt,name=hwaccel_api,json=hwaccelApi,proto3" json:"hwaccel_api,omitempty"`                                                   // Hardware acceleration API.
	Resolutions            []string               `protobuf:"bytes,5,rep,name=resolutions,proto3" json:"resolutions,omitempty"`                                                                   // List of resolutions to encode.
	ChannelLayouts         []string               `protobuf:"bytes,6,rep,name=channel_layouts,json=channelLayouts,proto3" json:"channel_layouts,omitempty"`                                       // List of channel layouts to encode.
	AudioCodecs            []AudioCodec           `protobuf:"varint,7,rep,packed,name=audio_codecs,json=audioCodecs,proto3,enum=config.v1.AudioCodec" json:"audio_codecs,omitempty"`              // List of audio codecs to use.
	VideoCodecs            []VideoCodec           `protobuf:"varint,8,rep,packed,name=video_codecs,json=videoCodecs,proto3,enum=config.v1.VideoCodec" json:"video_codecs,omitempty"`              // List of video codecs to use.
	ManifestFormat         []ManifestFormat       `protobuf:"varint,9,rep,packed,name=manifest_format,json=manifestFormat,proto3,enum=config.v1.ManifestFormat" json:"manifest_format,omitempty"` // List of manifest formats to create.
	DashOutput             string                 `protobuf:"bytes,10,opt,name=dash_output,json=dashOutput,proto3" json:"dash_output,omitempty"`                                                  // Output filename for DASH manifest.
	HlsOutput              string                 `protobuf:"bytes,11,opt,name=hls_output,json=hlsOutput,proto3" json:"hls_output,omitempty"`                                                     // Output filename for HLS master playlist.
	SegmentFolder          string                 `protobuf:"bytes,12,opt,name=segment_folder,json=segmentFolder,proto3" json:"segment_folder,omitempty"`                                         // Sub-folder for segment output.
	SegmentSize            int32                  `protobuf:"varint,13,opt,name=segment_size,json=segmentSize,proto3" json:"segment_size,omitempty"`                                              // Length of each segment in seconds.
	SegmentPerFile         bool                   `protobuf:"varint,14,opt,name=segment_per_file,json=segmentPerFile,proto3" json:"segment_per_file,omitempty"`                                   // Whether to put each segment in a separate file.
	GenerateIframePlaylist bool                   `protobuf:"varint,15,opt,name=generate_iframe_playlist,json=generateIframePlaylist,proto3" json:"generate_iframe_playlist,omitempty"`           // If true, the iFrame playlist will be generated.
	AvailabilityWindow     int32                  `protobuf:"varint,16,opt,name=availability_window,json=availabilityWindow,proto3" json:"availability_window,omitempty"`                         // Segment availability window in seconds.
	PresentationDelay      int32                  `protobuf:"varint,17,opt,name=presentation_delay,json=presentationDelay,proto3" json:"presentation_delay,omitempty"`                            // Presentation delay in seconds.
	UpdatePeriod           int32                  `protobuf:"varint,18,opt,name=update_period,json=updatePeriod,proto3" json:"update_period,omitempty"`                                           // Manifest update period in seconds.
	Encryption             *EncryptionConfig      `protobuf:"bytes,19,opt,name=encryption,proto3" json:"encryption,omitempty"`                                                                    // Encryption configuration.
	LowLatencyDashMode     bool                   `protobuf:"varint,20,opt,name=low_latency_dash_mode,json=lowLatencyDashMode,proto3" json:"low_latency_dash_mode,omitempty"`                     // Whether to use low latency mode for DASH.
	UtcTimings             []*UtcTimingPair       `protobuf:"bytes,21,rep,name=utc_timings,json=utcTimings,proto3" json:"utc_timings,omitempty"`                                                  // List of UTCTiming pairs for DASH MPD.
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PipelineConfig) Reset() {
	*x = PipelineConfig{}
	mi := &file_orchestrator_v1_config_pipeline_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineConfig) ProtoMessage() {}

func (x *PipelineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_v1_config_pipeline_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineConfig.ProtoReflect.Descriptor instead.
func (*PipelineConfig) Descriptor() ([]byte, []int) {
	return file_orchestrator_v1_config_pipeline_config_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineConfig) GetStreamingMode() StreamingMode {
	if x != nil {
		return x.StreamingMode
	}
	return StreamingMode_LIVE
}

func (x *PipelineConfig) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

func (x *PipelineConfig) GetDebugLogs() bool {
	if x != nil {
		return x.DebugLogs
	}
	return false
}

func (x *PipelineConfig) GetHwaccelApi() string {
	if x != nil {
		return x.HwaccelApi
	}
	return ""
}

func (x *PipelineConfig) GetResolutions() []string {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

func (x *PipelineConfig) GetChannelLayouts() []string {
	if x != nil {
		return x.ChannelLayouts
	}
	return nil
}

func (x *PipelineConfig) GetAudioCodecs() []AudioCodec {
	if x != nil {
		return x.AudioCodecs
	}
	return nil
}

func (x *PipelineConfig) GetVideoCodecs() []VideoCodec {
	if x != nil {
		return x.VideoCodecs
	}
	return nil
}

func (x *PipelineConfig) GetManifestFormat() []ManifestFormat {
	if x != nil {
		return x.ManifestFormat
	}
	return nil
}

func (x *PipelineConfig) GetDashOutput() string {
	if x != nil {
		return x.DashOutput
	}
	return ""
}

func (x *PipelineConfig) GetHlsOutput() string {
	if x != nil {
		return x.HlsOutput
	}
	return ""
}

func (x *PipelineConfig) GetSegmentFolder() string {
	if x != nil {
		return x.SegmentFolder
	}
	return ""
}

func (x *PipelineConfig) GetSegmentSize() int32 {
	if x != nil {
		return x.SegmentSize
	}
	return 0
}

func (x *PipelineConfig) GetSegmentPerFile() bool {
	if x != nil {
		return x.SegmentPerFile
	}
	return false
}

func (x *PipelineConfig) GetGenerateIframePlaylist() bool {
	if x != nil {
		return x.GenerateIframePlaylist
	}
	return false
}

func (x *PipelineConfig) GetAvailabilityWindow() int32 {
	if x != nil {
		return x.AvailabilityWindow
	}
	return 0
}

func (x *PipelineConfig) GetPresentationDelay() int32 {
	if x != nil {
		return x.PresentationDelay
	}
	return 0
}

func (x *PipelineConfig) GetUpdatePeriod() int32 {
	if x != nil {
		return x.UpdatePeriod
	}
	return 0
}

func (x *PipelineConfig) GetEncryption() *EncryptionConfig {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *PipelineConfig) GetLowLatencyDashMode() bool {
	if x != nil {
		return x.LowLatencyDashMode
	}
	return false
}

func (x *PipelineConfig) GetUtcTimings() []*UtcTimingPair {
	if x != nil {
		return x.UtcTimings
	}
	return nil
}

var File_orchestrator_v1_config_pipeline_config_proto protoreflect.FileDescriptor

var file_orchestrator_v1_config_pipeline_config_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc8, 0x07, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x77,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x77, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73,
	0x12, 0x38, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0b, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0e,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x6c, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6c, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x15, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c,
	0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0a, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x22, 0x0a, 0x0d,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x4f, 0x44, 0x10, 0x01,
	0x2a, 0x23, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x48, 0x4c, 0x53, 0x10, 0x01, 0x42, 0xb5, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58,
	0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_orchestrator_v1_config_pipeline_config_proto_rawDescOnce sync.Once
	file_orchestrator_v1_config_pipeline_config_proto_rawDescData []byte
)

func file_orchestrator_v1_config_pipeline_config_proto_rawDescGZIP() []byte {
	file_orchestrator_v1_config_pipeline_config_proto_rawDescOnce.Do(func() {
		file_orchestrator_v1_config_pipeline_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_orchestrator_v1_config_pipeline_config_proto_rawDesc), len(file_orchestrator_v1_config_pipeline_config_proto_rawDesc)))
	})
	return file_orchestrator_v1_config_pipeline_config_proto_rawDescData
}

var file_orchestrator_v1_config_pipeline_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_orchestrator_v1_config_pipeline_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_orchestrator_v1_config_pipeline_config_proto_goTypes = []any{
	(StreamingMode)(0),       // 0: config.v1.StreamingMode
	(ManifestFormat)(0),      // 1: config.v1.ManifestFormat
	(*UtcTimingPair)(nil),    // 2: config.v1.UtcTimingPair
	(*PipelineConfig)(nil),   // 3: config.v1.PipelineConfig
	(AudioCodec)(0),          // 4: config.v1.AudioCodec
	(VideoCodec)(0),          // 5: config.v1.VideoCodec
	(*EncryptionConfig)(nil), // 6: config.v1.EncryptionConfig
}
var file_orchestrator_v1_config_pipeline_config_proto_depIdxs = []int32{
	0, // 0: config.v1.PipelineConfig.streaming_mode:type_name -> config.v1.StreamingMode
	4, // 1: config.v1.PipelineConfig.audio_codecs:type_name -> config.v1.AudioCodec
	5, // 2: config.v1.PipelineConfig.video_codecs:type_name -> config.v1.VideoCodec
	1, // 3: config.v1.PipelineConfig.manifest_format:type_name -> config.v1.ManifestFormat
	6, // 4: config.v1.PipelineConfig.encryption:type_name -> config.v1.EncryptionConfig
	2, // 5: config.v1.PipelineConfig.utc_timings:type_name -> config.v1.UtcTimingPair
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_orchestrator_v1_config_pipeline_config_proto_init() }
func file_orchestrator_v1_config_pipeline_config_proto_init() {
	if File_orchestrator_v1_config_pipeline_config_proto != nil {
		return
	}
	file_orchestrator_v1_config_encryption_config_proto_init()
	file_orchestrator_v1_config_bitrate_config_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_orchestrator_v1_config_pipeline_config_proto_rawDesc), len(file_orchestrator_v1_config_pipeline_config_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_orchestrator_v1_config_pipeline_config_proto_goTypes,
		DependencyIndexes: file_orchestrator_v1_config_pipeline_config_proto_depIdxs,
		EnumInfos:         file_orchestrator_v1_config_pipeline_config_proto_enumTypes,
		MessageInfos:      file_orchestrator_v1_config_pipeline_config_proto_msgTypes,
	}.Build()
	File_orchestrator_v1_config_pipeline_config_proto = out.File
	file_orchestrator_v1_config_pipeline_config_proto_goTypes = nil
	file_orchestrator_v1_config_pipeline_config_proto_depIdxs = nil
}
